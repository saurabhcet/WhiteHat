// <auto-generated>
// Code generated by LUISGen C:\Users\Saurabh\Downloads\lusimombot.json -cs Luis.MyClassName -o C:\Users\Saurabh\source\repos\EchoBotTest\EchoBotTest
// Tool github: https://github.com/microsoft/botbuilder-tools
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>
using Newtonsoft.Json;
using System.Collections.Generic;
using Microsoft.Bot.Builder;
using Microsoft.Bot.Builder.AI.Luis;

namespace WhiteHat.Bot.CogServices
{
    public partial class ConversationRecongnizer : IRecognizerConvert
    {
        [JsonProperty("text")]
        public string Text;

        [JsonProperty("alteredText")]
        public string AlteredText;

        public enum Intent
        {
            Communication_CallBack,
            Communication_CallVoiceMail,
            Communication_EndCall,
            Communication_SendEmail,
            Email_AddMore,
            Email_SendEmail,
            None,
            Note_AddToNote,
            Note_ChangeTitle,
            Note_Clear,
            Note_Close,
            Note_Create,
            Note_Delete,
            Note_Open,
            Note_ReadAloud,
            Note_RemoveSentence,
            Places_MakeCall
        };
        [JsonProperty("intents")]
        public Dictionary<Intent, IntentScore> Intents;

        public class _Entities
        {
            // Simple entities
            public string[] Communication_ContactName;

            public string[] Communication_EmailSubject;

            public string[] Communication_Message;

            public string[] Communication_MessageType;

            public string[] Communication_RelationshipName;

            public string[] Email_ContactName;

            public string[] Email_EmailSubject;

            public string[] Note_Text;

            public string[] Note_Title;

            // Built-in entities
            public DateTimeSpec[] datetime;

            public string[] email;

            public double[] ordinal;

            // Lists
            public string[][] Note_Quantifier;

            // Pattern.any
            public string[] Email_Message_Any;

            public string[] Note_Text_any;

            public string[] Note_Title_any;

            // Instance
            public class _Instance
            {
                public InstanceData[] Communication_ContactName;
                public InstanceData[] Communication_EmailSubject;
                public InstanceData[] Communication_Message;
                public InstanceData[] Communication_MessageType;
                public InstanceData[] Communication_RelationshipName;
                public InstanceData[] Email_ContactName;
                public InstanceData[] Email_EmailSubject;
                public InstanceData[] Email_Message_Any;
                public InstanceData[] Note_Quantifier;
                public InstanceData[] Note_Text;
                public InstanceData[] Note_Text_any;
                public InstanceData[] Note_Title;
                public InstanceData[] Note_Title_any;
                public InstanceData[] datetime;
                public InstanceData[] email;
                public InstanceData[] ordinal;
            }
            [JsonProperty("$instance")]
            public _Instance _instance;
        }
        [JsonProperty("entities")]
        public _Entities Entities;

        [JsonExtensionData(ReadData = true, WriteData = true)]
        public IDictionary<string, object> Properties { get; set; }

        public void Convert(dynamic result)
        {
            var app = JsonConvert.DeserializeObject<ConversationRecongnizer>(JsonConvert.SerializeObject(result, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore }));
            Text = app.Text;
            AlteredText = app.AlteredText;
            Intents = app.Intents;
            Entities = app.Entities;
            Properties = app.Properties;
        }

        public (Intent intent, double score) TopIntent()
        {
            Intent maxIntent = Intent.None;
            var max = 0.0;
            foreach (var entry in Intents)
            {
                if (entry.Value.Score > max)
                {
                    maxIntent = entry.Key;
                    max = entry.Value.Score.Value;
                }
            }
            return (maxIntent, max);
        }
    }
}
